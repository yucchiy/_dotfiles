" set $PATH
let $PATH=$HOME."/bin:".$HOME."/.go/bin:".$HOME."/.cargo/bin:".$PATH

" set GOPATH
let $GOPATH=$HOME

set path+=$PATH
let mapleader=','

" encoding settings
set enc=utf-8
set fenc=utf-8
set fencs=utf-8
set encoding=utf-8
set encoding=utf-8

" new line formats
set fileformats=unix,dos,mac

" use backspace when insert mode
set backspace=indent,eol,start

" set language
language message C
language time C

" fold settings
set foldenable
set foldmethod=marker

set ambiwidth=double

" indent
set autoindent
set smartindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" ui
set number
set ruler
set hidden
set showmatch
set cursorline

set formatoptions+=t
set wrap linebreak nolist
set guioptions=

" not using local back up
set nobackup

if &compatible
  set nocompatible
endif

set runtimepath+=~/.vim/bundle/neobundle.vim/
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \       'windows' : 'make -f make_mingw32.make',
            \       'cygwin'  : 'make -f make_cygwin.mak',
            \       'mac'     : 'make -f make_mac.mak',
            \       'unix'    : 'make -f make_unix.mak',
            \   },
            \ }
NeoBundle 'Shougo/unite.vim', {
            \ 'autoload' : {
            \     'commands' : [{'name': 'Unite', 'complete' : 'customlist,unite#complete_source'},
            \                   'UniteWithBufferDir',
            \                   'UniteWithCursorWord', 'UniteWithInput'],
            \     }
            \ }
NeoBundle has('lua') ? 'Shougo/neocomplete' : 'Shougo/neocomplcache'
NeoBundle "Shougo/vimfiler"

NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'tyru/caw.vim'
NeoBundle 'sorah/unite-ghq'
NeoBundle 'shougo/unite-outline'
NeoBundle 'vim-syntastic/syntastic'

NeoBundle 'stephpy/vim-php-cs-fixer'
NeoBundle 'shawncplus/phpcomplete.vim'

NeoBundle 'rust-lang/rust.vim'
NeoBundle 'racer-rust/vim-racer'

NeoBundleLazy 'yucchiy/omnisharp-vim', {
      \   'autoload': { 'filetypes': [ 'cs', 'csi', 'csx' ] },
      \ }

NeoBundle 'osyo-manga/vim-marching'

NeoBundle 'itspriddle/vim-marked'
NeoBundle 'godlygeek/tabular'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'glidenote/memolist.vim'

call neobundle#end()

" Plugin reading finish
filetype plugin indent on

NeoBundleCheck

" for VimFiler.vim
let g:vimfiler_as_default_explorer = 1

" for neocomplete.vim
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3

inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType rust setlocal omnifunc=racer#RacerComplete

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

set omnifunc=syntaxcomplete#Complete

let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'

let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.rust = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'


" for caw.vim
vmap <leader>ct <plug>(caw:i:toggle)

" for unite.vim
let g:unite_enable_start_insert = 1
let g:unite_source_file_mru_filename_format = ''
let g:unite_source_file_mru_limit = 100
let g:unite_split_rule = 'rightbelow'

noremap  [unite] <Nop>
map      <Leader>u [unite]
nnoremap <silent>[unite]p :<C-u>Unite file_rec/git<CR>
nnoremap <silent>[unite]g :<C-u>Unite ghq<CR>

" for syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" for rust
let g:racer_cmd=expand("~/.cargo/bin/racer")
let $RUST_SRC_PATH=expand("~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src")
let g:racer_experimental_completer = 1

" for OmniSharp
"
let g:OmniSharp_server_type = 'roslyn'
" let g:OmniSharp_server_type = 'v1'

" autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>

autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
autocmd FileType cs nnoremap <leader>d  :OmniSharpDocumentation<cr>

autocmd FileType cs nnoremap <C-K> :OmniSharpNavigateUp<cr>
autocmd FileType cs nnoremap <C-J> :OmniSharpNavigateDown<cr>

autocmd FileType cs nnoremap <leader>rn :OmniSharpRename<cr>
autocmd FileType cs nnoremap <leader>cf :OmniSharpCodeFormat<cr>
autocmd FileType cs nnoremap <leader>rl :OmniSharpReloadSolution<cr>

autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

" Racer
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

" memolist.vim
let g:memolist_memo_suffix = "markdown"
let g:memolist_memo_date = "%Y-%m-%d %H:%M:%S"
let g:memolist_vimfiler = 1
let g:memolist_vimfiler_option = "-split -simple"
let g:memolist_template_dir_path = "$HOME/.ghq/github.com/yucchiy/blog.yucchiy.com/content"
let g:memolist_path = "$HOME/.ghq/github.com/yucchiy/blog.yucchiy.com/content"

" vim-marching

let g:marching_clang_command = "/usr/bin/clang"
let g:marching#clang_command#options = {
\	"cpp" : "-std=gnu++1y"
\}
let g:marching_clang_command_option="-std=c++1y"
let g:marching_enable_neocomplete = 1

if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

" Font
syntax enable
if has('gui_running')
    set guifont=Ricty\ Diminished\ Discord\ Regular:h14 
    set t_Co=256
    set colorcolumn=80
    set columns=180
    set lines=45
    set transparency=5

    set background=dark
    colorscheme lucius
else
    set t_Co=256
    set t_ut=
    set colorcolumn=80

    set background=dark
    colorscheme lucius 
end

augroup fileTypeIndent
    autocmd BufRead,BufNewFile *.js setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END

set conceallevel=0
